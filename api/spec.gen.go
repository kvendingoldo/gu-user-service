// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUTW/TQBD9K6uB42KHFHHwiUKLFAm1ES2nKofBHtuLvB/dHTeNIv93tGuH5oty4WR7",
	"d2bem3lvvIXSamcNGQ5QbCGULWlMr9feWx9fnLeOPCtKx6WtKD4rCqVXjpU1UIzBIt1JqK3XyFCAMnwx",
	"Bwm8cTR+UkMeBgmaQsDmr4V2139SA3tlGhgGCZ4ee+WpguIBJsBd+GqQcEPrJfEpb4P6DNwNahK2FtyS",
	"cMSngBIYm9O8+417Pe+IaEKP9CZu2HW3NRQPW3jrqYYC3uQvQuSTCvnUyyCPm1HVKaUfRj32JFR1yGtf",
	"jI8fzohxxFRVsBpWQzxWpraj5IaxTLxJo+qgAHSKCfWnsMamIZ8pC3IaMdyNZ+JyuRD3hBok9D4mtcyu",
	"yPO9nEEeNXEpAmrXUUrmFln0gYLA2Exg60lgEGgEPY9hbEVF2prAHplETci9pyCUSSO4dWRipYtsJoKj",
	"UtWqxAQloVMlmUAv3oBLh2VLYp7NDiiHIs/X63WG6Tqzvsmn3JB/W3y5vrm7fjfPZlnLukuGIa/DbX1H",
	"/kmVdK7vPIXkUQzF3f7MllObIOGJfBiH8j6bZbNY2Toy6BQUcJGOJDjkNjkijwPKt6oa4lczuuxwtt+J",
	"e2+mYYqfGKgS1ggUQZmmI7G4ggTh04QWFRTwVZlqSfx5k+4cetTE5ENy7mH1xVX0XazMVtTEZQvRQVAk",
	"ji/uUBXsG459T3L67UTK/7brKqYHZ+P8Y8Z8NtuZlMy4XM51k875rxDZbfcQXlu4tG3DiStjVzvM0bM1",
	"9h3/N9jxV3sGuDf07KhkqgRNMRJCrzX6zamimyhhqhLIP+1kOti93Rple2aMjhpWw+8AAAD//44YXpoL",
	"BgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
